# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS


on:
  workflow_call:
    inputs:
      registry:
        description: Docker registry
        default: ghcr.io
        required: false
        type: string

      username:
        description: Docker registry username
        default: ${{ github.actor }}
        required: false
        type: string

      dockerfile:
        description: Dockerfile path
        default: ./Dockerfile
        required: false
        type: string
    
    secrets:
      password:
        description: Dockerfile registry password
        required: false 
  workflow_dispatch:
  
    
env:

  CONTAINER_NAME: "moaks"
  RESOURCE_GROUP: "cvs-poc"
  CLUSTER_NAME: "cvs-poc-aks"
  IMAGE_PULL_SECRET_NAME: "imagesec"
  DEPLOYMENT_MANIFEST_PATH: 'deployment.yml'
  DOCKER_IMAGE: ${{ inputs.registry }}/${{ github.repository }}
  DOCKER_PASSWORD: ${{ secrets.password || secrets.GITHUB_TOKEN }}

jobs:

  createSecret:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
    # Logs in with your Azure credentials
    - name: Log in with Azure
      uses: azure/login@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
      
    # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
    - name: Get K8s context
      uses: azure/aks-set-context@v3.2
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.CLUSTER_NAME }}

    - name: Login to Docker registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ env.DOCKER_PASSWORD }}

    # Creates a kubernetes secret on your Azure Kubernetes Service cluster that matches up to the credentials from the last step
    - name: Create K8s secret for pulling image from ACR
      uses: Azure/k8s-create-secret@v1.1
      with:
        container-registry-url: ghcr.io
        container-registry-username: ${{ github.actor }}
        container-registry-password: ${{ env.DOCKER_PASSWORD }}
        secret-name: ${{ env.IMAGE_PULL_SECRET_NAME }}  
  deploy:
      permissions:
        actions: read
        contents: read
        id-token: write
      runs-on: ubuntu-latest
      needs: [createSecret]
      steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3.2
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          
      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v3.1
        with:
          action: deploy
          manifests: ${{ env.DEPLOYMENT_MANIFEST_PATH }}
          images: ghcr.io/cvs-health-poc/pickled:latest
          imagepullsecrets: ${{ env.IMAGE_PULL_SECRET_NAME }}
